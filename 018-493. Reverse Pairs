class Solution {
    public int reversePairs(int[] nums) {
        int n = nums.length;
        return mergeSort(nums,0,n-1);
    }
    private int mergeSort(int[] arr , int low, int high){
        if(low>=high) return 0;
        int mid = low+(high-low)/2;
        int cnt =0;
        cnt += mergeSort(arr, low, mid);
        cnt += mergeSort(arr, mid+1, high);
        cnt += merge(arr,low, mid, high);
        return cnt;
    }

    private int merge(int[] arr, int low, int mid, int high){
        int left = low;
        int right = mid+1;
        int cnt =0;
        while (left <= mid && right <= high) {
            if ((long) arr[left] > 2L * arr[right]) {
                cnt += mid - left + 1; // Count all remaining elements on the left
                right++;
            } else {
                left++;
            }
        }

        left = low;
        right = mid + 1;
        List<Integer> temp = new ArrayList<>();
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                right++;
            }
        }

        while(left<=mid){
            temp.add(arr[left]);
            left++;
        }
        while(right<=high){
            temp.add(arr[right]);
            right++;
        }

        for(int i=low; i<=high; i++){
            arr[i] = temp.get(i-low);
        }
        return cnt;
    }

}


/*
Time Complexity:

The mergeSort function divides the array into halves recursively until it reaches subarrays of size 1. This process takes O(log n) time, where n is the number of elements in the array.
In the merge function, for each element in the left half, it compares it with elements in the right half, which takes O(n) time.
Therefore, the overall time complexity of the merge step is O(n).
Since the merge step is performed O(log n) times in the worst case during the merge sort process, the overall time complexity is O(n log n).

Space Complexity:

The space complexity is O(n) due to the auxiliary array temp used in the merge function to merge the sorted halves of the array.
Additionally, there is recursion in the mergeSort function, which consumes stack space proportional to the depth of the recursion tree. Since the recursion depth can be at most O(log n), the space complexity contributed by the recursion stack is also O(log n).
Therefore, the overall space complexity is O(n + log n), which simplifies to O(n).
In summary:

Time Complexity: O(n log n)
Space Complexity: O(n)
*/
